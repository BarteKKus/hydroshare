import tempfile
import os
import json

from hs_core.hydroshare import hs_bagit

from django_irods.storage import IrodsStorage

from hs_dataverse.utils import get_owner_data
from hs_dataverse.utils import get_other_metadata

from hs_core.models import BaseResource
from django.contrib.auth.models import User, Group
from hs_access_control.models import UserAccess, GroupAccess, ResourceAccess, \
    UserResourcePrivilege, GroupResourcePrivilege, UserGroupPrivilege, \
    UserResourceProvenance, GroupResourceProvenance, UserGroupProvenance


def global_reset():
    UserResourcePrivilege.objects.all().delete()
    UserGroupPrivilege.objects.all().delete()
    GroupResourcePrivilege.objects.all().delete()
    UserResourceProvenance.objects.all().delete()
    UserGroupProvenance.objects.all().delete()
    GroupResourceProvenance.objects.all().delete()
    UserAccess.objects.all().delete()
    GroupAccess.objects.all().delete()
    ResourceAccess.objects.all().delete()
    User.objects.all().delete()
    Group.objects.all().delete()
    BaseResource.objects.all().delete()


def export_bag(self):
    """
    exports the bag for the resource, contained in self (self.res)

    :param self: an object with a resource self.res as an attribute
    :return: a temporary directory containing the temporary files of metadata from the resource's bag
    """
    irods_storage_obj = hs_bagit.create_bag_files(self.res)
    self.assertTrue(isinstance(irods_storage_obj, IrodsStorage))
    fd = irods_storage_obj.open("{}/data/resourcemetadata.xml".format(self.res.short_id), 'r')

    contents = b""
    BUFSIZE = 4096
    block = fd.read(BUFSIZE)
    while block != b"":
        # Do stuff with byte.
        contents += block
        block = fd.read(BUFSIZE)

    _, mkfile_path = tempfile.mkstemp(prefix='resourcemetadata.xml', dir=self.temp_dir)
    os.rename(mkfile_path, mkfile_path[:-8])  # remove last 8 characters generated by tempfile
    mkfile_path = mkfile_path[:-8]
    with open(mkfile_path, 'wb') as mkfile:
        mkfile.write(contents)

    owner_dict = get_owner_data(self.res)
    _, mkfile_path = tempfile.mkstemp(prefix='ownerdata.json', dir=self.temp_dir)
    os.rename(mkfile_path, mkfile_path[:-8])  # remove last 8 characters generated by tempfile
    mkfile_path = mkfile_path[:-8]
    with open(mkfile_path, 'w') as mkfile:
        json.dump(owner_dict, mkfile)

    other_metadata_dict = get_other_metadata(self.res, self.res.short_id)
    _, mkfile_path = tempfile.mkstemp(prefix='other_metadata.json', dir=self.temp_dir)
    os.rename(mkfile_path, mkfile_path[:-8])  # remove last 8 characters generated by tempfile
    mkfile_path = mkfile_path[:-8]
    with open(mkfile_path, 'w') as mkfile:
        json.dump(other_metadata_dict, mkfile)

    return self.temp_dir
