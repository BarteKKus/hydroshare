import tempfile
import shutil
import os
import json
import tempfile
from zipfile import ZipFile

from django.test import TestCase
from django.core.exceptions import PermissionDenied
from django.contrib.auth.models import Group

from django_irods.storage import IrodsStorage

from hs_core import hydroshare
from hs_core.testing import MockIRODSTestCaseMixin
from hs_core.hydroshare import hs_bagit
from hs_core.hydroshare import get_party_data_from_user

from hs_access_control.tests.utilities import global_reset

from rest_framework.test import APIClient
# from hs_core.tests.api.rest.base import HSRESTTestCase
from rest_framework import status

from hs_dataverse.utils import create_metadata_dict 

from pprint import pprint

# The following two functions are copied from hs_dataverse/management/commands/dataverse.py
def get_owner_data(resource):
    owners = list(resource.raccess.owners)
    if len(owners) == 0:
        owner_dict = {
            'username': '',
            'first_name': '',
            'last_name': '',
            'email': '',
            'organization': ''
        }
    else:
        for o in owners: 
            profile = o.userprofile
            party = get_party_data_from_user(o)

            owner_dict = {
                'username': format(o.username),
                'first_name': format(o.first_name),
                'last_name': format(o.last_name),
                'email': format(o.email),
                'organization': format(party['organization'])
            }
    return owner_dict

def get_other_metadata(res, rid):
    # read extended metadata as key/value pairsi
    ext_metadata = ''
    for key, value in list(res.extra_metadata.items()):
        ext_metadata = ext_metadata + key + ': ' + value + '\n'

    # get funding agency data
    funding_agency_names = []
    award_numbers = []

    for a in res.metadata.funding_agencies.all():
        funding_agency_names.append(a.agency_name)
        award_numbers.append(a.award_number) 

    # get list of contributors
    contributors = []
    for c in res.metadata.contributors.all():
        contributors.append(str(c))

    # if the resource is published, set the doi and update booleans in dict.
    doi = ''
    if res.raccess.public:
        public = True
    else: 
        public = False
    
    if res.raccess.published:
        published = True
        doi = res.doi
    else:
        published = False 

    other_metadata_dict = {
        'rid': rid,
        'public': public,
        'published': published,
        'doi': doi,
        'extended_metadata_notes': ext_metadata,
        'language': str(res.metadata.language),
        'funding_agency_names': funding_agency_names,
        'award_numbers': award_numbers,
        'contributors': contributors
    }
    return other_metadata_dict


def export_bag(self): 
    irods_storage_obj = hs_bagit.create_bag_files(self.res)
    self.assertTrue(isinstance(irods_storage_obj, IrodsStorage))
    fd = irods_storage_obj.open("{}/data/resourcemetadata.xml".format(self.res.short_id), 'r')
    
    contents = b""
    BUFSIZE = 4096
    block = fd.read(BUFSIZE) 
    while block != b"": 
        # Do stuff with byte. 
        contents += block
        block = fd.read(BUFSIZE) 

    _, mkfile_path = tempfile.mkstemp(prefix='resourcemetadata.xml', dir=self.temp_dir)
    os.rename(mkfile_path, mkfile_path[:-8]) # remove last 8 characters generated by tempfile
    mkfile_path = mkfile_path[:-8]
    with open(mkfile_path, 'wb') as mkfile:
        mkfile.write(contents)

    owner_dict = get_owner_data(self.res)
    _, mkfile_path = tempfile.mkstemp(prefix='ownerdata.json', dir=self.temp_dir)
    os.rename(mkfile_path, mkfile_path[:-8]) # remove last 8 characters generated by tempfile
    mkfile_path = mkfile_path[:-8]
    with open(mkfile_path, 'w') as mkfile:
        json.dump(owner_dict, mkfile)

    other_metadata_dict = get_other_metadata(self.res, self.res.short_id)
    _, mkfile_path = tempfile.mkstemp(prefix='other_metadata.json', dir=self.temp_dir)
    os.rename(mkfile_path, mkfile_path[:-8]) # remove last 8 characters generated by tempfile
    mkfile_path = mkfile_path[:-8]
    with open(mkfile_path, 'w') as mkfile:
        json.dump(other_metadata_dict, mkfile)

    return self.temp_dir


def update_metadata(self):
    # add these new metadata elements
    metadata_dict = [
        {'title': {'value': 'Updated Resource Title'}},
        {'description': {'abstract': 'Updated Resource Abstract'}},
        {'date': {'type': 'valid', 'start_date': '1/26/2016', 'end_date': '12/31/2016'}},
        {'date': {'type': 'created', 'start_date': '1/26/2016'}},   # will be ignored without error
        {'date': {'type': 'modified', 'start_date': '1/26/2016'}},   # will be ignored without error
        {'date': {'type': 'published', 'start_date': '1/26/2016'}},   # will be ignored without error
        {'date': {'type': 'available', 'start_date': '1/26/2016'}},   # will be ignored without error
        {'creator': [{'name': 'John Smith', 'email': 'jsmith@gmail.com'},
                     {'name': 'Jane Smith', 'email': 'jsmith@gmail.com'}]},
        {'contributor': {'name': 'Kelvin Marshal', 'email': 'kmarshal@yahoo.com',
                         'organization': 'Utah State University',
                         'identifiers': {'ORCID': 'https://orcid.org/john',
                                         'ResearchGateID': 'https://www.researchgate.net/john'}
                         }},
        {'coverage': {'type': 'period', 'value': {'name': 'Name for period coverage', 'start': '1/1/2000',
                                                  'end': '12/12/2012'}}},
        {'coverage': {'type': 'point', 'value': {'name': 'Name for point coverage', 'east': '56.45678',
                                                 'north': '12.6789', 'units': 'decimal deg'}}},
        {'format': {'value': 'txt/csv'}},   # will be ignored without error
        {'format': {'value': 'zip'}},   # will be ignored without error
        {'identifier': {'name': 'someIdentifier', 'url': "http://some.org/002"}},
        {'identifier': {'name': 'hydroShareIdentifier', 'url': "http://hydroshare.org/001"}},   # will be ignored
        {'language': {'code': 'fre'}},
        {'relation': {'type': 'isPartOf', 'value': 'http://hydroshare.org/resource/001'}},
        {'rights': {'statement': 'This is the rights statement for this resource', 'url': 'http://rights.ord/001'}},
        {'source': {'derived_from': 'http://hydroshare.org/resource/0001'}},
        {'subject': {'value': 'sub-1'}},
        {'subject': {'value': 'sub-2'}},
    ]

    hydroshare.update_science_metadata(pk=self.res.short_id, metadata=metadata_dict,
                                       user=self.admin)

    self.res.extra_metadata = {'name': 'John Jackson', 'email': 'jj@gmail.com'}
    self.res.save()

class T01CheckMetadata(TestCase):

    def setUp(self):
        self.group, _ = Group.objects.get_or_create(name='Hydroshare Author')
        self.admin = hydroshare.create_account(
            'admin@gmail.com',
            username='admin',
            first_name='administrator',
            last_name='last_name_admin',
            superuser=True,
            groups=[]
        )

        self.cat = hydroshare.create_account(
            'tom@gmail.com',
            username='tom',
            first_name='not a dog',
            last_name='last_name_cat',
            superuser=False,
            groups=[]
        )

        self.mouse = hydroshare.create_account(
            'jerry@gmail.com',
            username='jerry',
            first_name='not a cat',
            last_name='last_name_dog',
            superuser=False,
            groups=[]
        )

        self.res = hydroshare.create_resource(
            resource_type='CompositeResource',
            owner=self.cat,
            title='all about dog holes',
            metadata=[],
        )

        self.temp_dir = tempfile.mkdtemp(prefix=self.res.short_id, suffix='_dataverse_tempdir', dir='/tmp')
    
    def tearDown(self):
        super(T01CheckMetadata, self).tearDown()
        # same pattern as setUp, kill everything I put in
        # also delete all tempfiles and tempdirs
        shutil.rmtree(self.temp_dir)



    def test_extract_metadata(self):
        update_metadata(self)

        # options = {'reset_bag': True, 'generate_metadata': True}
        self.temp_dir = export_bag(self)
        
        meta_dict = create_metadata_dict(self.temp_dir)

        # title
        self.assertEqual(self.res.metadata.title.value, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][0]['value'])

        # author
        self.assertEqual(self.res.metadata.creators.name, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][3]['value'][0]['authorName']['value']) # for now, only checks one creator

        # contact
        self.assertEqual(self.res.creator.last_name + ', ' + self.res.creator.first_name, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][4]['value'][0]['datasetContactName']['value'])

        # abstract
        self.assertEqual(self.res.metadata.description, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][5]['value'][0]['dsDescriptionValue']['value'])

        # keywords
        for keyword in self.res.metadata.subjects.all():
            self.assertEqual(keyword.value, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][7]['value'])

        # related resources
        for related_res in self.res.metadata.relations.all():
            if (related_res.type == 'IsDescribedBy'):
                self.assertEqual(related_res.value, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][21]['value'])

        # notes
        for key, value in list(self.res.extra_metadata.items()):
            self.assertEqual('{}: {}'.format(key, value), meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][9]['value'])

        # contributors
        for contributor in self.res.metadata.contributors.all():
            self.assertEqual(contributor.name, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][11]['value'][0]['contributorName']['value'])

        # grants
        for funding_agency in self.res.funding_agencies.all():
            self.assertEqual(funding_agency.agency_name, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][12]['value']['grantNumberAgency']['value'])
            self.assertEqual(funding_agency.award_number, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][12]['value']['grantNumberValue']['value'])

        # date modified
        self.assertEqual(self.res.metadata.date.modified.value, meta_dict['datasetVersion']['metadataBlocks']['citation']['fields'][5]['value'][0]['dsDescriptionDate'])

        # coverage
        for x in self.res.metadata.coverages.all():
            if x.type == 'box':
                self.assertEqual(x.value.eastlimit, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['eastLongitude']['value'])
                self.assertEqual(x.value.north, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['northLongitude']['value'])
                self.assertEqual(x.value.westlimit, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['westLongitude']['value'])
                self.assertEqual(x.value.southlimit, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['southLongitude']['value'])
                self.assertEqual(x.value.units, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['units']['value'])
            if x.type == 'point':
                self.assertEqual(x.value.east, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['westLongitude']['value'])
                self.assertEqual(x.value.northlimit, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['southLongitude']['value'])
                self.assertEqual(x.value.units, meta_dict['datasetVersion']['metadataBlocks']['citation']['geofields'][2]['value']['units']['value'])
